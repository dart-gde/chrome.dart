// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.copresencePrivate</code> API to interface with Chrome
// from the whispernet_proxy extension.
namespace copresencePrivate {
  dictionary Token {
    DOMString token;
    boolean audible;
  };

  dictionary DecodeSamplesParameters {
    ArrayBuffer samples;

    boolean decodeAudible;
    boolean decodeInaudible;

    long audibleTokenLength;
    long inaudibleTokenLength;
  };

  dictionary EncodeTokenParameters {
    Token token;
    long repetitions;
  };

  dictionary AudioParameters {
    // This string contains marshalling of a custom parameters structure
    // that Chrome and the Whispernet wrapper both know about. These are
    // based off //components/copresence/proto/config_data.proto.
    ArrayBuffer paramData;
  };

  interface Functions {
    // Send a boolean indicating whether our initialization was successful.
    static void sendInitialized(boolean success);
    // Sends an array of found tokens to Chrome.
    static void sendFound(Token[] tokens);
    // Send an array buffer of samples encoded for the specified token.
    static void sendSamples(Token token, ArrayBuffer samples);
    // Send a boolean indicating whether we detected a broadcast or not.
    static void sendDetect(boolean detected);
  };

  interface Events {
    // Fired to request audio configuration of the whisper.net library.
    static void onConfigAudio(AudioParameters audioParams);
    // Fired to request encoding of the given token.
    static void onEncodeTokenRequest(EncodeTokenParameters encodeParams);
    // Fired when we have new samples to decode.
    static void onDecodeSamplesRequest(DecodeSamplesParameters decodeParams);
    // Fired to request a DetectBroadcast.
    static void onDetectBroadcastRequest();
  };
};
