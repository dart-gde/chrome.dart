// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>networking.captivePortal</code> API to authenticate to captive
// portals.
namespace networking.captivePortal {
  // Indicator for the type of network. Used in both $(NetworkInfo) and
  // $(NetworkFilter). This extension API might be extended to ethernet and
  // cellular networks in the future.
  enum NetworkType { Wifi };

  // A dictionary listing properties specific to WiFi networks. Either
  // <code>SSID</code> or <code>HexSSID</code> must be set.
  dictionary WiFiInfo {
    // Unique identifier of the network
    DOMString GUID;

    // hex-encoded byte sequence
    DOMString? HexSSID;

    // SSID of the network
    DOMString? SSID;
  };

  // A dictionary listing properties of the newly connected network on which a
  // captive portal has been detected. This information is passed to the
  // authenticating extension via the $(onCaptivePortalDetected) event.
  dictionary NetworkInfo {
    // Currently only WiFi supported, see $(NetworkType).
    NetworkType Type;

    // Properties specific to WiFi networks.
    WiFiInfo? WiFi;
  };

  // A dictionary which allows to filter networks by SSID. This filter matches a
  // Wi-Fi network if the network's SSID equals any of the entries in either
  // <code>SSID</code> or <code>HexSSID</code>.
  dictionary WiFiFilter {
    // List of SSIDs that can be handled by the extension. Note that the entries
    // of <code>SSID</code> can only represent Unicode strings. SSID will be
    // used in the UTF-8 encoding. For arbitrary byte sequences use
    // <code>HexSSID</code>.
    DOMString[] SSID;

    // hex encoded byte sequence.
    DOMString[] HexSSID;
  };

  // Represents a general network filter. A network matches this filter if it
  // matches any of the type-specific subfilters, i.e. $(WiFiFilter).
  dictionary NetworkFilter {
    // This field stores the filter information for the WiFi networks.
    WiFiFilter? WiFi;
  };

  // Argument to $(finishAuthentication) indicating the result of the
  // authentication attempt.
  enum AuthenticationResult {
    // The extension does not handle this network or captive portal (e.g. server
    // end-point not found or not compatible).
    unhandled,

    // The extension handled this network and authenticated successfully.
    success,

    // The extension handled this network, tried to authenticate, however was
    // rejected by the server.
    rejected,

    // The extension handled this network, tried to authenticate, however failed
    // due to an unspecified error.
    failed
  };

  interface Functions {
    // Allows an extension to define a network filter for the networks it can
    // handle. Successive calls to this function will generate a union of the
    // supplied filters.
    // |networkFilter|: network filter to add
    void addNetworkFilter(NetworkFilter networkFilter);

    // Removes all previously added filters.
    void removeAllNetworkFilters();

    // Called by the extension to notify the captive portal API that it finished
    // an authentication attempt and hand over the result of the attempt. This
    // function must only be called with the GUID of the latest
    // $(onCaptivePortalDetected) event.
    // |GUID|: unique network identifier obtained from
    //         $(onCaptivePortalDetected).
    // |result|: the result of the authentication attempt
    void finishAuthentication(DOMString GUID, AuthenticationResult result);
  };

  interface Events {
    // This event fires everytime a captive portal is detected on a network
    // matching any of the currently registered network filters and the user
    // consents to use the extension for authentication. Network filters may be
    // added using the $(addNetworkFilter). $(removeAllNetworkFilters) removes
    // all network filters. If no network filters are registered, this event
    // does not fires.
    // Upon receiving this event the extension should start its authentication
    // attempt with the captive portal. When the extension finishes its attempt
    // it must call $(finishAuthentication) with the <code>GUID</code> received
    // with this event and the appropriate $(AuthenticationResult) to notify
    // the captive portal API.
    // |networkInfo|: detailed information about the network on which a captive
    //                portal was detected.
    static void onCaptivePortalDetected(NetworkInfo networkInfo);
  };
};
